package utils_test

import (
	"github.com/LGuilhermeMoreira/loja-de-cafe/utils"
	"github.com/stretchr/testify/assert"
	"testing"
)

const (
	data = ``
	path = "../images/"
)

func TestGetBase64(t *testing.T) {
	_, err := utils.SaveImage(data, path, "imagem_test")
	assert.Nil(t, err)
}

func TestSaveImage(t *testing.T) {
	base64 := utils.GetBase64(path + "imagem_test.svg")
	if base64 == "" {
		t.Fatal("base64 is empty")
	}
	if base64 != data {
		t.Fatal("base64 is wrong")
	}
}
